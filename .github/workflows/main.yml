name: RDP Windows Server with Persistent Storage, Tailscale, WSL2, Docker, and Ollama

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Install and configure rclone
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_REGION: ${{ secrets.S3_REGION }}
        run: |
          Invoke-WebRequest -Uri "https://downloads.rclone.org/rclone-current-windows-amd64.zip" -OutFile "$env:TEMP\rclone.zip"
          Expand-Archive -Path "$env:TEMP\rclone.zip" -DestinationPath "$env:TEMP\rclone-tmp" -Force
          Get-ChildItem "$env:TEMP\rclone-tmp" -Filter "rclone-v*-windows-amd64" | Select-Object -First 1 | Copy-Item -Destination "$env:TEMP\rclone" -Recurse -Force
          $env:Path += ";$env:TEMP\rclone"

          rclone config create s3-rdp-storage s3 `
            provider=AWS `
            access_key_id=$env:AWS_ACCESS_KEY_ID `
            secret_access_key=$env:AWS_SECRET_ACCESS_KEY `
            region=$env:S3_REGION

          # Mount S3 bucket as persistent S:\ drive
          Start-Process -FilePath "rclone" -ArgumentList @(
            "mount",
            "s3-rdp-storage:$env:S3_BUCKET_NAME",
            "S:",
            "--vfs-cache-mode", "writes",
            "--dir-cache-time", "1000h",
            "--volname", "S3-Persistent-Storage",
            "--daemon"
          ) -NoNewWindow

          Start-Sleep -Seconds 10
          Write-Host "S3 bucket should now be mounted as S:\ drive"

      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          
          # For testing, allow any incoming connection on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # (Optional) Restart the Remote Desktop service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)      # A-Z
              Lower   = [char[]](97..122)     # a-z
              Number  = [char[]](48..57)      # 0-9
              Special = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126)) # Special characters
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          # Bring up Tailscale with the provided auth key and set a unique hostname
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          # Wait for Tailscale to assign an IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          
          # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        shell: pwsh
        run: |
            Write-Host "`n=== RDP ACCESS ==="
            Write-Host "Address: $env:TAILSCALE_IP"
            Write-Host "Username: Cyberpunk"
            Write-Host "Password: $env:RDP_CREDS"
            Write-Host "Persistent Drive: S:\"
            Write-Host "Docker: Available (Linux via WSL2)"
            Write-Host "Ollama: Available in WSL2 Ubuntu"
            Write-Host "Ollama Commands: use 'wsl' prefix"
            Write-Host "Example: wsl -d Ubuntu ollama run phi3"
            Write-Host "==================`n"

            # Block until cancelled
            $source = New-Object Threading.CancellationTokenSource
            Register-EngineEvent PowerShell.Exiting -Action { 
                Write-Host "Workflow cancelled. Exiting loop..."
                $source.Cancel()
            } | Out-Null

            while (-not $source.Token.IsCancellationRequested) {
                Write-Host "[$(Get-Date)] RDP Active. Your work is being saved to S:\"
                Start-Sleep -Seconds 60
            }

      # --- Gracefully unmount the drive before workflow ends ---
      - name: Unmount S3 Drive
        if: always() # This ensures it runs even if a previous step fails
        run: |
            # Try to unmount the drive gracefully
            & "$env:TEMP\rclone\rclone.exe" unmount "S:" --daemon
            # Forcefully delete the drive mapping if needed
            net use S: /delete /y 2>$null | Out-Null
